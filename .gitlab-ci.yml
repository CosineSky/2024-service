# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# include:
#   - template: SAST.gitlab-ci.yml
#   - template: Dependency-Scanning.gitlab-ci.yml

# nodejs-scan-sast:
#   tags: [ docker ]

# semgrep-sast:
#   tags: [ docker ]

# gemnasium-dependency_scanning:
#   tags: [ docker ]

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - sync
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - ls
    - docker build -t demo/front .
    - docker save demo/front -o demo.tar
  artifacts:
    untracked: true

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 1
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 1
    - echo "No lint issues found."


# code-quality:
#   stage: test
#   image: docker:20.10.12
#   allow_failure: false
#   services:
#     - name: 'docker:20.10.12-dind'
#       command: ['--tls=false', '--host=tcp://0.0.0.0:2375']
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_CERT_PATH: ""
#     DOCKER_TLS_CERTDIR: ""
#     DOCKER_TLS_VERIFY: ""
#     CODE_QUALITY_IMAGE_TAG: "0.96.0"
#     CODE_QUALITY_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/ci-cd/codequality:$CODE_QUALITY_IMAGE_TAG"
#     DOCKER_SOCKET_PATH: /var/run/docker.sock
#   needs: []
#   script:
#     - export SOURCE_CODE=$PWD
#     - |
#       if ! docker info &>/dev/null; then
#         if [ -z "$DOCKER_HOST" ] && [ -n "$KUBERNETES_PORT" ]; then
#           export DOCKER_HOST='tcp://localhost:2375'
#         fi
#       fi
#     - | # this is required to avoid undesirable reset of Docker image ENV variables being set on build stage
#       function propagate_env_vars() {
#         CURRENT_ENV=$(printenv)

#         for VAR_NAME; do
#           echo $CURRENT_ENV | grep "${VAR_NAME}=" > /dev/null && echo "--env $VAR_NAME "
#         done
#       }
#     - |
#       if [ -n "$CODECLIMATE_REGISTRY_USERNAME" ] && [ -n "$CODECLIMATE_REGISTRY_PASSWORD" ] && [ -n "$CODECLIMATE_PREFIX" ]; then
#         CODECLIMATE_REGISTRY=${CODECLIMATE_PREFIX%%/*}
#         docker login "$CODECLIMATE_REGISTRY" --username "$CODECLIMATE_REGISTRY_USERNAME" --password "$CODECLIMATE_REGISTRY_PASSWORD"
#       fi
#     - docker pull --quiet "$CODE_QUALITY_IMAGE"
#     - |
#       docker run --rm \
#         $(propagate_env_vars \
#           SOURCE_CODE \
#           TIMEOUT_SECONDS \
#           CODECLIMATE_DEBUG \
#           CODECLIMATE_DEV \
#           REPORT_STDOUT \
#           REPORT_FORMAT \
#           ENGINE_MEMORY_LIMIT_BYTES \
#           CODECLIMATE_PREFIX \
#           CODECLIMATE_REGISTRY_USERNAME \
#           CODECLIMATE_REGISTRY_PASSWORD \
#           DOCKER_SOCKET_PATH \
#         ) \
#         --volume "$PWD":/code \
#         --volume "$DOCKER_SOCKET_PATH":/var/run/docker.sock \
#         "$CODE_QUALITY_IMAGE" /code
#     - cat gl-code-quality-report.json
#     # - |
#     #   if grep "issue" gl-code-quality-report.json
#     #   then
#     #     echo "Test fail"
#     #     exit 1
#     #   else
#     #     echo "Test success"
#     #     exit 0
#     #   fi
#   artifacts:
#     reports:
#       codequality: gl-code-quality-report.json
#     paths:
#       - gl-code-quality-report.json
#     expire_in: 1 week
#   dependencies: []
#   rules:
#     - if: '$CODE_QUALITY_DISABLED'
#       when: never
#     - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

sync_with_github:
  stage: sync
  script:
    - echo "syncing"
    # - git remote add github https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/$GITHUB_USERNAME/2024-HCI-Mirror.git
    # - git push -u github --all
    # - git push -u github --tags

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - sshpass -p "1qaz" scp -o StrictHostKeyChecking=no demo.tar cloudsky@172.29.4.13:~
    - sshpass -p "1qaz" ssh -o StrictHostKeyChecking=no cloudsky@172.29.4.13 'docker container rm -f demo; docker load -i demo.tar; docker run -d --name demo -e app_server_ip=172.29.4.13 -p 8080:8080 demo/front /bin/bash -c "nginx; tail -f /dev/null"'

    # 1. 上传前端打包文件到云主机
    # - sshpass -p "1qaz" scp -o StrictHostKeyChecking=no demo.tar cloudsky@172.29.4.13:~
    # 2. 解压前端文件到 /var/www/html/demo 目录
    # - sshpass -p "1qaz" ssh -o StrictHostKeyChecking=no cloudsky@172.29.4.13 'tar -xf demo.tar -C /tmp'
    # - sshpass -p "1qaz" ssh -o StrictHostKeyChecking=no cloudsky@172.29.4.13 'tar -xvf demo.tar -C /var/www/html/demo'
    # 3. 安装 nginx（如果尚未安装）
    # - sshpass -p "1qaz" ssh -o StrictHostKeyChecking=no cloudsky@172.29.4.13 'sudo apt update && sudo apt install -y nginx'
    # 4. 配置 nginx：修改 default 配置文件，将 root 指向解压后的 demo 目录
    # - sshpass -p "1qaz" ssh -o StrictHostKeyChecking=no cloudsky@172.29.4.13 'sudo sed -i "s|root /var/www/html|root /var/www/html/demo;|g" /etc/nginx/sites-available/default'
    # 5. 重启 nginx 使配置生效
    # - sshpass -p "1qaz" ssh -o StrictHostKeyChecking=no cloudsky@172.29.4.13 'sudo systemctl restart nginx'
    # 6. 可选步骤：检查 nginx 状态
    # - sshpass -p "1qaz" ssh -o StrictHostKeyChecking=no cloudsky@172.29.4.13 'sudo systemctl status nginx'
